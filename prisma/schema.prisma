// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CarTypes {
  SUV
  SPORT
  SEDAN
  COMPACT
  COUPE
  HATCHBACK
  TRUCK
  VAN
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum AvailabilityStatus {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

enum FuelEfficiencyUnits {
  M
  L
}

model Car {
  id                 Int                  @id @default(autoincrement())
  make               String
  model              String
  color              String
  description        String
  rentPrice          Float
  discountedPrice    Float?               @default(0)
  year               Int
  capacity           Int
  type               CarTypes
  transmission       Transmission?
  fuelEfficiency     Float?
  fuelEfficiencyUnit FuelEfficiencyUnits?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  addedBy            User                 @relation(fields: [addedById], references: [id], name: "addedByUser", onDelete: Cascade)
  addedById          String
  images             String[]
  rentalHistory      Rental[]
  reviews            RentalReview[]
  favoritedBy        User[]               @relation("favoritedByUsers")
  locationId         Int
  location           Location             @relation(fields: [locationId], references: [id], onDelete: Restrict)

  @@index([make, model, year], name: "carOverview")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  coverImage    String?
  rentedCars    Rental[]
  favoritedCars Car[]          @relation("favoritedByUsers")
  listedCars    Car[]          @relation("addedByUser")
  reviews       RentalReview[]

  @@index([name, email, image], name: "profile")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id            Int      @id @default(autoincrement())
  longitude     Float
  latitude      Float
  address       String   @unique
  city          String?
  state         String?
  country       String?
  zip           String?
  cars          Car[] 
  rentalPickups Rental[]

  // @@unique([city, state, zip])

  @@unique([latitude, longitude])
}

model Rental {
  id             Int                @id @default(autoincrement())
  car            Car                @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId          Int
  rentedTo       User               @relation(fields: [userId], references: [id])
  userId         String
  status         AvailabilityStatus
  pickUpTime     DateTime           @db.Timestamptz()
  dropOffTime    DateTime           @db.Timestamptz()
  startDate      DateTime           @db.Timestamptz()
  endDate        DateTime           @db.Timestamptz()
  total          Float
  locationId     Int
  pickUpLocation Location           @relation(fields: [locationId], references: [id], onDelete: Restrict)
  updatedAt      DateTime           @updatedAt
  createdAt      DateTime           @default(now())

  @@index([carId, status]) // to look up a car's rental status. This can also be useful to indicate if a car is available
}

model RentalReview {
  id          Int      @id @default(autoincrement())
  userId      String
  reviewedBy  User     @relation(fields: [userId], references: [id])
  carId       Int
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  rating      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
